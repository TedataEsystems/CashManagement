{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nimport { NgxMatDateAdapter, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\n\nconst NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/** Creates an array and fills it with values. */\n\n\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\n\n\nclass NgxMatMomentAdapter extends NgxMatDateAdapter {\n  constructor(dateLocale, _options) {\n    super();\n    this._options = _options;\n    this.setLocale(dateLocale || moment.locale());\n  }\n\n  setLocale(locale) {\n    super.setLocale(locale);\n    let momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n    };\n  }\n\n  getYear(date) {\n    return this.clone(date).year();\n  }\n\n  getMonth(date) {\n    return this.clone(date).month();\n  }\n\n  getDate(date) {\n    return this.clone(date).date();\n  }\n\n  getDayOfWeek(date) {\n    return this.clone(date).day();\n  }\n\n  getMonthNames(style) {\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n    return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n  }\n\n  getDateNames() {\n    return this._localeData.dates;\n  }\n\n  getDayOfWeekNames(style) {\n    if (style == 'long') {\n      return this._localeData.longDaysOfWeek;\n    }\n\n    if (style == 'short') {\n      return this._localeData.shortDaysOfWeek;\n    }\n\n    return this._localeData.narrowDaysOfWeek;\n  }\n\n  getYearName(date) {\n    return this.clone(date).format('YYYY');\n  }\n\n  getFirstDayOfWeek() {\n    return this._localeData.firstDayOfWeek;\n  }\n\n  getNumDaysInMonth(date) {\n    return this.clone(date).daysInMonth();\n  }\n\n  clone(date) {\n    return date.clone().locale(this.locale);\n  }\n\n  createDate(year, month, date) {\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\n    // explicitly check each case so we can throw more descriptive errors.\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = this._createMoment({\n      year,\n      month,\n      date\n    }).locale(this.locale); // If the result isn't valid, the date must have been out of bounds for this month.\n\n\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today() {\n    return this._createMoment().locale(this.locale);\n  }\n\n  parse(value, parseFormat) {\n    if (value && typeof value == 'string') {\n      return this._createMoment(value, parseFormat, this.locale);\n    }\n\n    return value ? this._createMoment(value).locale(this.locale) : null;\n  }\n\n  format(date, displayFormat) {\n    date = this.clone(date);\n\n    if (!this.isValid(date)) {\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\n    }\n\n    return date.format(displayFormat);\n  }\n\n  addCalendarYears(date, years) {\n    return this.clone(date).add({\n      years\n    });\n  }\n\n  addCalendarMonths(date, months) {\n    return this.clone(date).add({\n      months\n    });\n  }\n\n  addCalendarDays(date, days) {\n    return this.clone(date).add({\n      days\n    });\n  }\n\n  toIso8601(date) {\n    return this.clone(date).format();\n  }\n  /**\r\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n   * string into null. Returns an invalid date for all other values.\r\n   */\n\n\n  deserialize(value) {\n    let date;\n\n    if (value instanceof Date) {\n      date = this._createMoment(value).locale(this.locale);\n    } else if (this.isDateInstance(value)) {\n      // Note: assumes that cloning also sets the correct locale.\n      return this.clone(value);\n    }\n\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n\n      date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n    }\n\n    if (date && this.isValid(date)) {\n      return this._createMoment(date).locale(this.locale);\n    }\n\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj) {\n    return moment.isMoment(obj);\n  }\n\n  isValid(date) {\n    return this.clone(date).isValid();\n  }\n\n  invalid() {\n    return moment.invalid();\n  }\n\n  getHour(date) {\n    return date.hours();\n  }\n\n  getMinute(date) {\n    return date.minutes();\n  }\n\n  getSecond(date) {\n    return date.seconds();\n  }\n\n  setHour(date, value) {\n    date.hours(value);\n  }\n\n  setMinute(date, value) {\n    date.minutes(value);\n  }\n\n  setSecond(date, value) {\n    date.seconds(value);\n  }\n  /** Creates a Moment instance while respecting the current UTC settings. */\n\n\n  _createMoment(date, format, locale) {\n    const {\n      strict,\n      useUtc\n    } = this._options || {};\n    return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatMomentAdapter.ɵfac = function NgxMatMomentAdapter_Factory(t) {\n  return new (t || NgxMatMomentAdapter)(i0.ɵɵinject(MAT_DATE_LOCALE, 8), i0.ɵɵinject(NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatMomentAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMatMomentAdapter,\n  factory: NgxMatMomentAdapter.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatMomentAdapter, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_LOCALE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst DEFAULT_DATE_INPUT = 'l, LTS';\nconst NGX_MAT_MOMENT_FORMATS = {\n  parse: {\n    dateInput: DEFAULT_DATE_INPUT\n  },\n  display: {\n    dateInput: DEFAULT_DATE_INPUT,\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nclass NgxMomentDateModule {}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMomentDateModule.ɵfac = function NgxMomentDateModule_Factory(t) {\n  return new (t || NgxMomentDateModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMomentDateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMomentDateModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nNgxMomentDateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: NgxMatDateAdapter,\n    useClass: NgxMatMomentAdapter,\n    deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMomentDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: NgxMatDateAdapter,\n        useClass: NgxMatMomentAdapter,\n        deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }]\n  }], null, null);\n})();\n\nclass NgxMatMomentModule {}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatMomentModule.ɵfac = function NgxMatMomentModule_Factory(t) {\n  return new (t || NgxMatMomentModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatMomentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatMomentModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nNgxMatMomentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: NGX_MAT_DATE_FORMATS,\n    useValue: NGX_MAT_MOMENT_FORMATS\n  }],\n  imports: [[NgxMomentDateModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatMomentModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgxMomentDateModule],\n      providers: [{\n        provide: NGX_MAT_DATE_FORMATS,\n        useValue: NGX_MAT_MOMENT_FORMATS\n      }]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-mat-moment-adapter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, NGX_MAT_MOMENT_FORMATS, NgxMatMomentAdapter, NgxMatMomentModule, NgxMomentDateModule };","map":{"version":3,"sources":["C:/Users/manar.y70818/Desktop/UnifiedTemplate-simple/node_modules/@angular-material-components/moment-adapter/fesm2015/angular-material-components-moment-adapter.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","NgModule","MAT_DATE_LOCALE","_rollupMoment","_rollupMoment__default","NgxMatDateAdapter","NGX_MAT_DATE_FORMATS","moment","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS","providedIn","factory","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","NgxMatMomentAdapter","constructor","dateLocale","_options","setLocale","locale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","date","clone","year","getMonth","month","getDate","getDayOfWeek","day","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","Error","result","_createMoment","isValid","today","parse","value","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","toIso8601","deserialize","Date","isDateInstance","ISO_8601","obj","isMoment","invalid","getHour","hours","getMinute","minutes","getSecond","seconds","setHour","setMinute","setSecond","strict","utc","ɵfac","ɵprov","type","undefined","decorators","args","DEFAULT_DATE_INPUT","NGX_MAT_MOMENT_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NgxMomentDateModule","ɵmod","ɵinj","provide","useClass","deps","providers","NgxMatMomentModule","useValue","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nimport { NgxMatDateAdapter, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst moment = _rollupMoment__default || _rollupMoment;\r\n/** InjectionToken for moment date adapter to configure options. */\r\nconst NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\r\n    providedIn: 'root',\r\n    factory: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\r\n});\r\n/** @docs-private */\r\nfunction NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\r\n    return {\r\n        useUtc: false\r\n    };\r\n}\r\n/** Creates an array and fills it with values. */\r\nfunction range(length, valueFunction) {\r\n    const valuesArray = Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        valuesArray[i] = valueFunction(i);\r\n    }\r\n    return valuesArray;\r\n}\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\nclass NgxMatMomentAdapter extends NgxMatDateAdapter {\r\n    constructor(dateLocale, _options) {\r\n        super();\r\n        this._options = _options;\r\n        this.setLocale(dateLocale || moment.locale());\r\n    }\r\n    setLocale(locale) {\r\n        super.setLocale(locale);\r\n        let momentLocaleData = moment.localeData(locale);\r\n        this._localeData = {\r\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n            longMonths: momentLocaleData.months(),\r\n            shortMonths: momentLocaleData.monthsShort(),\r\n            dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\r\n            longDaysOfWeek: momentLocaleData.weekdays(),\r\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\r\n        };\r\n    }\r\n    getYear(date) {\r\n        return this.clone(date).year();\r\n    }\r\n    getMonth(date) {\r\n        return this.clone(date).month();\r\n    }\r\n    getDate(date) {\r\n        return this.clone(date).date();\r\n    }\r\n    getDayOfWeek(date) {\r\n        return this.clone(date).day();\r\n    }\r\n    getMonthNames(style) {\r\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\r\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\r\n    }\r\n    getDateNames() {\r\n        return this._localeData.dates;\r\n    }\r\n    getDayOfWeekNames(style) {\r\n        if (style == 'long') {\r\n            return this._localeData.longDaysOfWeek;\r\n        }\r\n        if (style == 'short') {\r\n            return this._localeData.shortDaysOfWeek;\r\n        }\r\n        return this._localeData.narrowDaysOfWeek;\r\n    }\r\n    getYearName(date) {\r\n        return this.clone(date).format('YYYY');\r\n    }\r\n    getFirstDayOfWeek() {\r\n        return this._localeData.firstDayOfWeek;\r\n    }\r\n    getNumDaysInMonth(date) {\r\n        return this.clone(date).daysInMonth();\r\n    }\r\n    clone(date) {\r\n        return date.clone().locale(this.locale);\r\n    }\r\n    createDate(year, month, date) {\r\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\r\n        // explicitly check each case so we can throw more descriptive errors.\r\n        if (month < 0 || month > 11) {\r\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n        }\r\n        if (date < 1) {\r\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n        }\r\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\r\n        // If the result isn't valid, the date must have been out of bounds for this month.\r\n        if (!result.isValid()) {\r\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n        }\r\n        return result;\r\n    }\r\n    today() {\r\n        return this._createMoment().locale(this.locale);\r\n    }\r\n    parse(value, parseFormat) {\r\n        if (value && typeof value == 'string') {\r\n            return this._createMoment(value, parseFormat, this.locale);\r\n        }\r\n        return value ? this._createMoment(value).locale(this.locale) : null;\r\n    }\r\n    format(date, displayFormat) {\r\n        date = this.clone(date);\r\n        if (!this.isValid(date)) {\r\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\r\n        }\r\n        return date.format(displayFormat);\r\n    }\r\n    addCalendarYears(date, years) {\r\n        return this.clone(date).add({ years });\r\n    }\r\n    addCalendarMonths(date, months) {\r\n        return this.clone(date).add({ months });\r\n    }\r\n    addCalendarDays(date, days) {\r\n        return this.clone(date).add({ days });\r\n    }\r\n    toIso8601(date) {\r\n        return this.clone(date).format();\r\n    }\r\n    /**\r\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n     * string into null. Returns an invalid date for all other values.\r\n     */\r\n    deserialize(value) {\r\n        let date;\r\n        if (value instanceof Date) {\r\n            date = this._createMoment(value).locale(this.locale);\r\n        }\r\n        else if (this.isDateInstance(value)) {\r\n            // Note: assumes that cloning also sets the correct locale.\r\n            return this.clone(value);\r\n        }\r\n        if (typeof value === 'string') {\r\n            if (!value) {\r\n                return null;\r\n            }\r\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\r\n        }\r\n        if (date && this.isValid(date)) {\r\n            return this._createMoment(date).locale(this.locale);\r\n        }\r\n        return super.deserialize(value);\r\n    }\r\n    isDateInstance(obj) {\r\n        return moment.isMoment(obj);\r\n    }\r\n    isValid(date) {\r\n        return this.clone(date).isValid();\r\n    }\r\n    invalid() {\r\n        return moment.invalid();\r\n    }\r\n    getHour(date) {\r\n        return date.hours();\r\n    }\r\n    getMinute(date) {\r\n        return date.minutes();\r\n    }\r\n    getSecond(date) {\r\n        return date.seconds();\r\n    }\r\n    setHour(date, value) {\r\n        date.hours(value);\r\n    }\r\n    setMinute(date, value) {\r\n        date.minutes(value);\r\n    }\r\n    setSecond(date, value) {\r\n        date.seconds(value);\r\n    }\r\n    /** Creates a Moment instance while respecting the current UTC settings. */\r\n    _createMoment(date, format, locale) {\r\n        const { strict, useUtc } = this._options || {};\r\n        return useUtc\r\n            ? moment.utc(date, format, locale, strict)\r\n            : moment(date, format, locale, strict);\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxMatMomentAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatMomentAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentAdapter });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentAdapter, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () {\r\n        return [{ type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [MAT_DATE_LOCALE]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Inject,\r\n                        args: [NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n                    }] }];\r\n    } });\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DEFAULT_DATE_INPUT = 'l, LTS';\r\nconst NGX_MAT_MOMENT_FORMATS = {\r\n    parse: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n    },\r\n    display: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n        monthYearLabel: 'MMM YYYY',\r\n        dateA11yLabel: 'LL',\r\n        monthYearA11yLabel: 'MMMM YYYY',\r\n    },\r\n};\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass NgxMomentDateModule {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMomentDateModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMomentDateModule, providers: [\r\n        {\r\n            provide: NgxMatDateAdapter,\r\n            useClass: NgxMatMomentAdapter,\r\n            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n        }\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMomentDateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        {\r\n                            provide: NgxMatDateAdapter,\r\n                            useClass: NgxMatMomentAdapter,\r\n                            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n                        }\r\n                    ],\r\n                }]\r\n        }] });\r\nclass NgxMatMomentModule {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxMatMomentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatMomentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentModule, imports: [NgxMomentDateModule] });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatMomentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentModule, providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }], imports: [[NgxMomentDateModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatMomentModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [NgxMomentDateModule],\r\n                    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-mat-moment-adapter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, NGX_MAT_MOMENT_FORMATS, NgxMatMomentAdapter, NgxMatMomentModule, NgxMomentDateModule };\n"]},"metadata":{},"sourceType":"module"}